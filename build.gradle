plugins {
    id 'fabric-loom' version "${loom_version}"
    id 'maven-publish'
    id "com.modrinth.minotaur" version "2.+"
    id "com.matthewprenger.cursegradle" version "1.4.0"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group
def local_bclib = findProject(':BCLib') != null
def local_wunderlib = findProject(':wunderlib') != null
def local_wover = findProject(':WorldWeaver') != null

loom {
    accessWidenerPath = file("src/main/resources/betternether.accesswidener")
    runs {
        // This adds a new gradle task that runs the datagen API: "gradlew runDatagenClient"
        datagenClient {
            inherit client
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.strict-validation"
            vmArg "-Dfabric-api.datagen.modid=${project.modrinth_id}"

            runDir "build/datagen"
        }
    }

    if (local_wover || local_wunderlib) {
        enableTransitiveAccessWideners = true
    }
}

sourceSets {
    main {
        // Add the datagenned files into the jar.
        resources {
            srcDirs += [
                    'src/main/generated'
            ]
        }
    }
}

subprojects { subproject ->
    subproject.tasks.withType(Javadoc) { javadocTask ->
        javadocTask.failOnError false
        javadocTask.enabled = false
    }

    subproject.tasks.withType(Jar) { jarTask ->
        if (jarTask.name == 'javadocJar') {
            jarTask.enabled = false
        }
    }
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()

    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // https://mvnrepository.com/artifact/javax.annotation/jsr305
    compileOnly group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'


    // compile against the API
    modCompileOnly "mcp.mobius.waila:wthit-api:fabric-${project.wthit_version}"

    // run against the full jar
    modRuntimeOnly "mcp.mobius.waila:wthit:fabric-${project.wthit_version}"

    println "Using local BCLib: ${local_bclib}"
    if (local_bclib) {
        implementation project(path: ":BCLib", configuration: 'dev')
    } else {
        modImplementation "org.betterx:bclib:${project.bclib_version}"
    }

    modCompileOnly "dev.emi:emi-fabric:${emi_version}:api"
    modLocalRuntime "dev.emi:emi-fabric:${emi_version}"

    modLocalRuntime "com.terraformersmc:modmenu:${project.modmenu_version}"

    println "Using local WunderLib: ${local_wunderlib}"
    if (local_wunderlib) {
        implementation project(path: ":wunderlib", configuration: 'dev')
    } else if (local_wover) {
        modImplementation "de.ambertation:wunderlib:${project.wunderlib_version}"
    }

    println "Using local WorldWeaver: ${local_wover}"
    if (local_wover) {
        implementation project(path: ":WorldWeaver", configuration: 'dev')

        gradle.knownWoverModules.each {
            implementation project(path: ":WorldWeaver:$it", configuration: 'dev')
        }
    } else if (local_bclib) {
        modImplementation "org.betterx:worldweaver:${project.wover_version}"
    }
}


repositories {
    mavenCentral()
    //mavenLocal()
    maven { url 'https://jitpack.io' }
    maven { url "https://maven.bai.lol" }
    maven { url 'https://maven.terraformersmc.com' }
    maven { url 'https://maven.ambertation.de/releases' }
    flatDir {
        dirs 'libs'
    }
}

processResources {
    println "Version: ${project.version}"
    inputs.property "version", project.version
    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    it.options.release = 21
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = "sources"
    from sourceSets.main.allSource
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from "LICENSE"
    from "LICENSE.ASSETS"
}

apply from: "helper.gradle"

allprojects {
    // Allow 400 errors.
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xmaxerrs" << "5000"
        }
    }
}
